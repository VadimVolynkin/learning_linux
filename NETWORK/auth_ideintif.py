# ===============================================================================================
# АУТЕНТИФИКАЦИЯ, ИДЕНТИФИКАЦИЯ
# ===============================================================================================

Идентификация     # процесс определения устройства. (fingerprint браузера, IP, uuid устройства, IMEI)
Аутентификация    # проверка что человек владеет логином через проверку пароля и др способы
Авторизация       # предоставление прав на выполнение определённых действий

Кодирование (JWE - Encrypting)  # преобразование структуры для защиты от прочтения данных третьими лицами
Шифрование                      # это защита данных от неавторизованного доступа
Подпись (JWS - Signature)       # позволяет получателю данных проверить аутентификацию источника данных, не дает кому-то подделать токен без информации о секретном ключе.

# === протоколы аутентификации: все 3 позволяют пользователю не разглашать логин и пароль недоверенным приложениям.
OpenID         # проверка учетных данных пользователя (identification & authentication).
OAuth2         # авторизация на друних сервисах. Нужен, чтобы получать токены доступа и с ними обращаться к ресурсам.
OpenID Connect # оба вариата одновременно. Нужен, чтобы получить у пользователя его учетные данные и проверить их.


# JSON Web Token (JWT)
Автономный пакет информации, который можно использовать для хранения данных о личности и подлинности пользователя вместо файлов cookie сеанса.

# URL (строка запроса)
Сервер добавляет в строку запроса маркер. 
Хранение идентификатора сессии в строке запроса упрощает проведение атаки. Передача идентификатора в cookie более безопасна.

# Fingerprint
Инструмент отслеживания браузера вне зависимости от желания пользователя быть идентифицированным. 
Это хеш сгенерированный js на базе неких уникальных параметров/компонентов браузера. Преимущество fingerprint в том что он нигде персистентно не хранится и генерируется только в момент логина и рефреша. Если клиент не браузер, а мобильное приложение, в качестве fingerprint используем любую уникальную строку(тот же uuid) персистентно хранящийся на устройстве.

# IP-адрес(перечислены недостатки)
Один компьютер может использовать разные IP-адреса в разных сессиях (динамический IP-адрес).
Компьютеры могут совместно использоваться несколькими пользователями
Отслеживание по IP может оказаться невозможным при использовании систем сохранения анонимности типа Tor.
Некоторые провайдеры пропускают весь веб-трафик через сеть прокси.

# Скрытые поля формы
Использование веб-форм со скрытыми полями для отслеживания сессии. 
Если параметры формы отправляются HTTP-методом GET, то поля фактически станут частью URL - их будет видно. 
Если параметры формы отправляются HTTP POST, информация не является ни частью URL, ни cookie, поэтому отслеживание будет незаметным.

# HTTP-аутентификация
При базовой аутентификации логин и пароль отправляется на сервер в незашифрованном виде.
При шифрованной аутентификации имя пользователя и пароль шифруются со случайным ключом, созданным сервером.

# Сохранение на клиентской стороне
Сохранение информации в истории, избранном, XML-хранилище, или сохранение веб-страницы на диск.
В браузерах, кэширующих файлы javascript, html страница может содержать <script type="text/javascript" src="/example.js">. С загрузкой страницы загружается и example.js с id=42. Затем скрипт кэшируется и не требует загрузки при повторном посещении страницы. Этот идентификатор может быть использован другим сценарием javascript или другой страницей, запрашивающей этот скрипт.

# DOM Window.name
Веб-браузеры могут хранить довольно большой объем данных (2–32 МБ) через JavaScript. могут использоваться вместо файлов cookie сеанса и также являются междоменными.

# Кэш браузера
Также может использоваться для хранения информации и отслеживания пользователя. 
Веб-браузер будет использовать кэш, вместо загрузки инфы с веб-сайта, если определит, что в кэше уже установлена ​​самая последняя версия ресурса.