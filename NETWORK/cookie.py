# ===============================================================================================
# COOKIE
# ===============================================================================================
Способ хранения состояния в клиенте
Куки создаются сервером и передаются клиенту для хранения. Клиент решает хранить или нет. Сайты должны запрашивать согласие перед установкой cookie.
Браузеры могут хранить от 20 до 200 куки по 4096 байт для каждого домена. Имена cookie нечувствительны к регистру.
Клиент при каждом последующем запросе пересылает куки на сервер
Cookie легко перехватить и подменить через нешифрованное соединение с сервером для получения доступа к учётной записи юзера. Рекомендуется https.


# ===============================================================================================
# ПРИМЕНЕНИЕ КУКИ
# ===============================================================================================

# === Управление сессиями, аутентификации или идентификации пользователя
Для идентификации и отображения корзины покупок даже без аутентификации и авторизации.

# принцип работы аутентиффикации через куки и сессии
1. Клиент делает запрос страницы - сервер создает сессию и создает куки с внесением в них id сессии.
Сервер отдает страницу сайта вместе с куки.
Пользователь может пройти аутентификацию или положить товар в корзину - все действия сохраняются в сессии.
Сервер может записать в сессии дату окончания куки, чтобы исключить подмену куки поддельным куки с более длинным сроком действия.

2. При каждом последующем заходе клиент передает серверу куки, а сервер узнает клиента и подшружает контент с учетом данных из сессии.


# === Персонализация
Cookie могут содержать логин для входа на веб-сайт, чтобы он мог автоматически заполняться при следующем входе.
Куки могут содержать персональные настройки пользователя.

# === Отслеживание
Файлы cookie могут используются для отслеживания привычек пользователей в Интернете для нацеливания рекламы. Сервер сохраняет URL страницы, дату / время запроса и cookie в файле журнала.


# ===============================================================================================
# ВИДЫ КУКИ
# ===============================================================================================

# === Построянные куки(следящие cookie)
Cookie могут устанавливать дату их удаления и храниться более чем один сеанс. По истечению срока они будут автоматически удалены браузером.
Используются чтобы избежать повторного ввода данных при каждом посещении сайта.
Используются рекламодателями для записи о предпочтениях пользователя.

# === Сессионные cookie(временные cookie)
Существуют только во временной памяти. Не имеют срока действия и будут удалены сразу при закрытии браузера.

# === Сторонние cookie
Часто используется рекламодателями для слежки за пользователями и предоставления релевантной рекламы.
Обычно устанавливаются при посещении сайта вместе с загрузкой баннеров, картинок со сторонних сайтов(куки принадлежат стороннему домену и отправляются каждый раз при посещении сайта с рекламными баннерами стороннего домена).
Настройки конфиденциальности браузера могут блокировать сторонние cookie.

# === Супер-cookie
Это cookie-файл с источником домена верхнего уровня типа .ru или .co.uk. Могут проблемой безопасности и часто блокируются веб-браузерами.
Супер-cookie с происхождением .com может выдать себя за законные запросы пользователей на запрос к example.com, даже если файл cookie не был создан с сайта example.com. Это может быть использовано для подделки логинов или изменения информации пользователя.

# === Зомби-cookie(evercookie или persistent cookie)
Не удаляемые или трудно удаляемые cookie, которые можно восстановить в браузере с помощью JavaScript. Для хранения куки сайт одновременно использует все доступные хранилища браузера (HTTP ETag, Session Storage, Local Storage, Indexed DB), в том числе и хранилища приложений, таких как Flash Player (Local Shared Objects), Microsoft Silverlight (Isolated Storage) и Java (Java persistence API).
Программа обнаруживает отсутствие в браузере cookie-файла, информация о котором присутствует в других хранилищах — тут же восстанавливает.


# ===============================================================================================
# УСТАНОВКА КУКИ И ПАРАМЕТРЫ КУКИ
# ===============================================================================================
Как и любой другой HTTP-заголовок, cookie должны передаваться в браузер до того, как будут переданы какие-либо другие данные.

# Как работает
Set-Cookie: name=value - команда сервера браузеру на установку куки. 
Если cookie разрешены браузером, он запоминает строку name=value и будет отправлять серверу Cookie: name=value с каждым запросом - сервер ответит возможно, добавив новые cookie. Значение cookie может быть изменено сервером Set-Cookie: name=new_value.

Cookie могут устанавливаться программами на языках типа JavaScript(document.cookie="temperature=20"), встроенными в текст страниц, или аналогичными скриптами, работающими в браузере.

Посмореть активные куки на этом сайте: javascript:alert(document.cookie) или javascript:prompt(document.cookie) в адресной строке браузера

# Запрос на установку cookie от сервера будет иметь следующий вид:
Set-Cookie: __Secure-name=value; max-age=31536000; domain=example.com; path=/; secure; httponly; samesite=lax

name              # имя cookie-файла.
Префикс __Secure- # secure, через https.
Префикс __Host-   # secure, через https, без параметра domain, с параметром path=/.
value             # значение для идентификации пользователя или служебная информация
expires и max-age # срок жизни cookie. expires - конечная дата Tue, 01-Sep-2020 10:50:22 GMT, max-age - количество секунд жизни cookie
path              # путь к директории на сервере, для которой будут доступны cookie. Если / - доступны всему домену. По умолчанию - текущая директория, из которой cookie устанавливаются в браузер.
domain            # какой домен или поддомен имеет доступ к этой cookie
secure            # указывает браузеру, что cookie должны передаваться только по https
httponly          # запрещает доступ к cookie по API document.cookie для предотвращения краж cookie посредством XSS-атак.
samesite          # cookie не должны отсылаться с межсайтовыми запросами для защиты от межсайтовых подделок запроса (CSRF). 
# samesite=none - передача cookie без ограничений. 
# samesite=lax  - только безопасные HTTP-методы(GET, HEAD, OPTIONS и TRACE). 
# samesite=strict или просто samesite блокирует отправку cookie с любыми запросами от других ресурсов. Cookie будут передаваться только в пределах домена, с которого были установлены.


# ===============================================================================================
# ХРАНЕНИЕ В БРАУЗЕРЕ
# ===============================================================================================

# === HTTP ETag (entity tag)
Хеш идентификатор If-None-Match: "686897696a7c876b7e" в запросе проверяет была ли страница изменена, нужно ли загружать заново. Если версия из кеша актуальна - вернет HTTP статусом 304 Not Modified и не станет перезагружать.
ETags может быть использован для отслеживания уникальных пользователей.


# === Web Storage(Session Storage и Local Storage) - новая концепция для хранения данных типа ключ-значение в HTML5.

# Session Storage
Временное хранилище информации, которая удаляется после закрытия браузера - 5mb. 
Для работы в javascript с session storage есть объект sessionStorage.

# Local Storage
Хранилище для данных на постоянной основе без срока действия 10mb. 
Эти данные не передаются на сервер в запросе HTTP. 
Для работы с local storage в javascript используется объект localStorage.

# Indexed DB
Встроенная база данных типа ключ-значение, более мощная, чем localStorage.
Предназначена для оффлайн приложений.


# ===============================================================================================
# НЕДОСТАТКИ
# ===============================================================================================

# === Неточная идентификация
cookie идентифицируют не человека, а сочетание учётной записи, компьютера, и браузера.

# === Кража cookie
1. Cookie могут быть украдены с помощью анализа трафика — это называется взломом сессии. Если сетевой трафик не шифруется, злоумышленники могут прочесть сообщения пользователей сети, в том числе их cookie, используя снифферы.

2. Подмена cookie злоумышленником. Решить этот вопрос можно используя безопасное соединение https с установкой атрибута Secure для отправки куки.

3. XSS атаки - межсайтовый скриптинг и несанкционированная отправка cookie на серверы, которые не должны получать их.
Межсайтовый скриптинг: cookie должны обмениваться лишь между сервером и клиентом, но отправляются третьей стороне.
Если при исполнении кода сервера в браузере куки дотупны, то их содержимое может оказаться на серверах, которые не должны получать к ним доступ.
HttpOnly делает cookie недоступными для скриптов со стороны клиента.

# === Подмена cookie
Подмена cookie: атакующий отправляет серверу подложные cookie, возможно, изменив легитимные cookie, ранее полученные от сервера.
Для защиты нужно хранить в cookie лишь идентификатор сессии, в то время как вся другая информация хранится на сервере.

# === Межсайтовые cookie
Сайт example1.com не должен изменять или устанавливать cookie другого сайта example2.org, но браузер может иметь уязвимость, позволяющую вредоносным сайтам нарушать это правило. Здесь злоумышленник атакует пользователей с уязвимыми браузерами, а не сайт напрямую. Целью таких атак могут быть идентификаторы сессий(вариант взлома сессии).

# === Срок действия cookie
Сайт, использующий библиотеки Everycookie, без труда обходит все меры по сохранению анонимности, восстанавливая куки из других хранилищь браузера. Для защиты от Everycookie рекомендуется использование режима Private Browsing.





 